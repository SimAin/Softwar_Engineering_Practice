Operator -> + 
    Can be used to add numbers and concatenate strings which previously we used to add numbers. 
    Operator is determined by the type of its operands.
    An operator which can work on different types is called an overloaded operator.

Casting 
    Allows implicit casting from a smaller-range numeric primitive data type to a larger-range one 

    int a = 1;  double b; b = a;
    will work.

    double a = 1.4; int b; b = a;
    will not - the compiler will warn that the incompatible dataypes will result in a lossy operation, i.e. the .4 will be lost.
    If you actually want to lose the .4 you need to explicitly cast.
    double d = 99.07;   long l = (long)d;

If v Switch
    The if statement tests one statement and chooses between two pieces of code based on the result. 
    Testing for a variety of possible values and take action depending on them: Called a multi-way conditional statement. 
    The switch construct allows us to do this by testing a value and executing statement(s) according to its various possible values.
    The switch statement only switches on a restricted range of datatypes: byte, short, char, int and String

Types    
    A named idea which can be defined with different values and supporting one or more operations is a type. 
    Java provides us with some built-in types (int, String, etc), but applications also need custom types. 
    E.g. Application selling flight tickets will need a type to represent a ticket. 
        A ticket could have values for the type of journey (air, sea, rail), start point, end point, cost, etc. 
        The ticket could support methods like checking if it was paid, cancelling a ticket and issuing a refund, etc.
    
Class
    A class can be regarded as a defining pattern or template of a type of object.
    Used to define an objects characteristics and behaviour.

Useful packages:
    java.lang
        Core support for language features
    java.io
        Provides basic I/O to the file system
    java.net
        Code that lets you implement network applications
    java.util
        Contains data structures (e.g. a tree, a set, a map) and common operations on them.
        Subpackage:
            java.util.regex
               Regular expression patterns
    java.sql
        Tools for database access.
    
    Full list of packages: https://docs.oracle.com/javase/8/docs/api/index.html

Java Pros 
https://www.technotification.com/2016/07/java-best-programming-language.html 
    1. Object Orientation
    2. Rich API
    3. Great collection of Open Source libraries
    4. Platform Independent and Free
    5. Wonderful Community and Documentation

Java Cons
https://www.reddit.com/r/programming/comments/9dzpu/ask_reddit_why_does_everyone_hate_java/ 
    Verbose and repetitive
    Factory classes
    Writing Java when coming from another high level language feels like you are stuttering, it is very repetitive.
    Boilerplate
    Everything is a nail. The fact that everything is a class (except for the things that aren't) will give you a rough time of things once you really start trying to be tricky. 
        You can work around these with anonymous classes and reflection, but again, it's an extremely verbose way of doing things that adds more code which clouds the actual important code.

Rule of three 
    ("Three strikes and you refactor") 
    Code refactoring rule of thumb to decide when similar pieces of code should be refactored 
        Two instances of similar code don't require refactoring
        When similar code is used three times, it should be extracted into a new procedure. 

Two main purposes of inheritance: 
    To inherit code (code inheritance through subclassing) - Useful for code reuse
    To inherit the type (subtyping) - Useful for polymorphism and specialisation.

        Subtype describes the relationship between types that explicitly recognises the principle of substitution. 
            Type B is considered to be a subtype of A if two conditions hold. 
                An instance of B can legally be assigned to a variable declared as type A. 
                This value can then be used by the variable with no observable change of behaviour.

        Subclass refers to the mechanics of constructing a new class using inheritance 
            Recognisable by the presence of the keyword extends.

    Subtype relationship is more abstract, and is only loosely documented directly by the program source. 
    In most situations, a subclass is also a subtype. 
    Subtypes can be formed using interfaces, linking types that have no inheritance relationship whatsoever. 

To protect a specific method from being overridden, it has to be declared with the final modifier.


Liskov Substitution Principle (LSP)
    Wherever a superclass object is expected, we can substitute a subclass object.

Polymorphism (many forms) 
    The ability to refer to objects of different forms, and treat them as the same. 
        Triangle myTriangle = new Triangle();
        Shape myTriangle = new Triangle();

An Interface, representing a contract, has three properties:
    It can be used to define an abstraction of a class, i.e., its contractual interface.
    Supplier class implements this interface.
    A Client class depends on this interface, not on the class that implements it.


The Dependency Inversion Principle (DIP)
    donâ€™t depend on concrete classes; depend on abstractions
    alternatively, Program to an interface, not to an implementation

Interfaces 
    Used when you to define behaviour common to several classes but wish to leave implementation of behaviour to them (i.e. an abstraction)
        An interface has no variable declarations, 
            Can be used to define "constants" (i.e., data fields that are implicitly public static final) 
            shared by all objects of any implementing class
        All methods in an interface are abstract (are method prototypes that do not have bodies or actual implementations)
        Interfaces do not contain constructors
        Members of interface are (implicitly) public
        Classes that claim to implement an interface must provide the services described by the interface, i.e. implement all its methods
        Classes may implement more than one interface
